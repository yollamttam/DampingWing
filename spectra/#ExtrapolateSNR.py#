import os
import numpy as np
import matplotlib.pyplot as plt
import pylab as p
import scipy.interpolate as sp
from scipy import optimize

def getFilenamesAndRedshifts():
    nspectra = 20;
    
    f1 = 'Q0836-spec.tex'
    f2 = 'Q1306-spec.tex'
    f3 = 'qso_z_628_lo_res.txt'
    f4 = 'qso_z_637_lo_res.txt'
    f5 = 'z517.spec.tex'
    f6 = 'z521.spec.tex'
    f7 = 'z530.spec.tex'
    f8 = 'z531.spec.tex'
    f9 = 'z541.spec.tex'
    f10 = 'z574.tex'
    f11 = 'z580.tex'
    f12 = 'z582_hres.spec.tex'
    f13 = 'z582.tex'
    f14 = 'z595.tex'
    f15 = 'z599_hres.spec.tex'
    f16 = 'z599.tex'
    f17 = 'z605.tex'
    f18 = 'z607.tex'
    f19 = 'z614.tex'
    f20 = 'z621.tex'
    
    print "We are skipping %s since its fucked..."%(f7)
    farray1 = [f1, f2, f3, f4, f5, f6, f8, f9, f10]
    farray2 = [f11, f12, f13, f14, f15, f16, f17, f18, f19, f20]
    f = np.hstack((farray1,farray2))
    
    z1 = 5.82
    z2 = 5.99
    z3 = 6.28
    z4 = 6.37
    z5 = 5.17
    z6 = 5.21
    z7 = 5.30
    z8 = 5.31
    z9 = 5.41
    z10 = 5.74
    z11 = 5.80
    z12 = 5.82
    z13 = 5.82
    z14 = 5.95
    z15 = 5.99
    z16 = 5.99
    z17 = 6.05
    z18 = 6.07
    z19 = 6.14
    z20 = 6.21
    zarray1 = [z1, z2, z3, z4, z5, z6, z8, z9, z10]
    zarray2 = [z11, z12, z13, z14, z15, z16, z17, z18, z19, z20]
    z = np.hstack((zarray1,zarray2))

    return f,z

def getFilenamesAndRedshiftsWithNoise():
    nspectra = 20;
    
    f1 = 'Q0836-spec.tex'
    f2 = 'Q1306-spec.tex'
    f3 = 'qso_z_628_lo_res.txt'
    f4 = 'qso_z_637_lo_res.txt'
    f5 = 'z517.spec.tex'
    f6 = 'z521.spec.tex'
    f7 = 'z530.spec.tex'
    f8 = 'z531.spec.tex'
    f9 = 'z541.spec.tex'
    f10 = 'z582_hres.spec.tex'
    f11 = 'z599_hres.spec.tex'
    f = [f1, f2, f3, f4, f5, f6, f8, f9, f10, f11]
        
    f1 = 'Q0836-noise_noise.tex'
    f2 = 'Q1306-noise_noise.tex'
    f3 = 'noise_z_628_lo_res_noise.txt'
    f4 = 'noise_z_637_lo_res_noise.txt'
    f5 = 'z517.var_noise.tex'
    f6 = 'z521.var_noise.tex'
    f7 = 'z530.var_noise.tex'
    f8 = 'z531.var_noise.tex'
    f9 = 'z541.var_noise.tex'
    f10 = 'z582_hres.var_noise.tex'
    f11 = 'z599_hres.var_noise.tex'
    nf = [f1, f2, f3, f4, f5, f6, f8, f9, f10, f11]
       

    z1 = 5.82
    z2 = 5.99
    z3 = 6.28
    z4 = 6.37
    z5 = 5.17
    z6 = 5.21
    z7 = 5.30
    z8 = 5.31
    z9 = 5.41
    z10 = 5.82
    z11 = 5.99    
    z = [z1, z2, z3, z4, z5, z6, z8, z9, z10, z11]

    return f,nf,z

def testSNR():

    z = 5.99
    blueLambda = 1275*(1+z)
    redLambda = 1375*(1+z)

    filename = 'z599_hres.spec.tex'
    data = np.genfromtxt(filename)
    wavelengths = data[:,0]
    flux = data[:,1]

    tdata = np.genfromtxt('LBQS.lis')
    tLambdas = tdata[:,0]
    tFlux = tdata[:,1]
    tLambdas = tLambdas*(1+z)
    scaleTemp = np.mean(flux[(wavelengths>blueLambda)&(wavelengths<redLambda)])/np.mean(tFlux[(tLambdas<redLambda)&(tLambdas>blueLambda)])
    tFlux = scaleTemp*tFlux

    maxL = 10800
    minL = 9000
    pspan = 400
    w = wavelengths
    alli = np.nonzero(((w>minL)&(w<maxL)))
    
    allvars = np.zeros(np.shape(alli[0]))
    allwaves = w[alli]
    print np.shape(allvars),np.shape(alli)
    dL = 60
    dlambda = np.abs(w[alli[0][2]]-w[alli[0][1]])
    pspan = np.floor(dL/dlambda)
    print "variance calculated over %d pixels" % (pspan)
    for i in range(0,np.size(alli)):
        
        ii = alli[0][i]
               
        minL = w[ii-pspan]
        maxL = w[ii+pspan]
        print "difference in wavelengths for variance: %f" % (maxL-minL)
        crapN = np.sqrt(np.var(flux[ii-pspan:ii+pspan]))
        crapD = np.mean(tFlux[(tLambdas>minL)&(tLambdas<maxL)])
        allvars[i] = crapD/crapN
        

    plt.plot(allwaves,allvars,'x')
    plt.plot(np.array((8317,8317)),np.array((0,6)))
    plt.show(block=False)
    
    
    lambdaCheck = 8317
    varCheck = 0

    ndeg = 2
    p = np.polyfit(allwaves,allvars,ndeg)
    x = np.linspace(8000,10600,5000)
    varfit = np.zeros(np.shape(x))
    for q in range(0,ndeg+1):
        varfit = varfit + p[q]*x**(ndeg-q)
        varCheck = varCheck + p[q]*lambdaCheck**(ndeg-q)
    plt.plot(x,varfit)
    print "Extrapolated SNR at Lya Forest: %f" % (varCheck)
    minL = 8000
    maxL = 10500
    plt.figure()
    plt.plot(tLambdas[(tLambdas>minL)&(tLambdas<maxL)],tFlux[(tLambdas>minL)&(tLambdas<maxL)])


    #plt.plot(wavelengths[(w<maxL)&(w>minL)],flux[(w>minL)&(w<maxL)])
    plt.axis([8500,11000,0,1e-16])
    plt.show(block=False)

    input("Press return to end program")
    plt.close()

def estimateSNRs():
    f,z = getFilenamesAndRedshifts()
    nspectra = len(f)
    extrapArray = np.zeros((nspectra,1))
    redArray = np.zeros((nspectra,1))
    knownArray = np.zeros((nspectra,1))
    for i in range(0,nspectra):
        varCheck,snrEstimate,snrKnown = oneSNR(z[i],f[i])
        extrapArray[i] = varCheck
        redArray[i] = snrEstimate
        knownArray[i] = snrKnown

    plt.figure()
    plt.plot(extrapArray)
    plt.plot(redArray)
    plt.plot(knownArray)
    plt.legend(['Extrapolated SNR','Red-Side SNR','Provided SNR'])
    plt.show(block=False)
    input("Press return to end program...")

def findWeightings():
    f,z = getFilenamesAndRedshifts()
    nspectra = len(f)
    for i in range(0,nspectra):
        findOneWeighting(z[i],f[i])
    

def findOneWeighting(z,filename):
    # This should find the individual weightings for each spectra
    # This will use sigmaF, smoothed on FWHM = 140 km/s
    # alphabar, ratio of unsmoothed sigmaN_blue^2/sigmaN_red^2
    # omega_i, ratio of sigmaN_smoothed,i^2/sigmaN_i^2

    sigmaF = 0.161197
    alphabar = 0.087133

    
    


def meanAlpha():
    f,z = getFilenamesAndRedshifts()
    nspectra = len(f)
    epsilon = 1e-12
    alpha = 0
    alphacount = epsilon
    for i in range(0,nspectra):
        alpha,alphacount = oneAlpha(f[i],alpha,alphacount)

    alpha = alpha/alphacount
    print "mean alpha value: %f" % (alpha)

def meanSigmaF():
    f,z = getFilenamesAndRedshifts()
    nspectra = len(f)
    epsilon = 1e-12
    alpha = 0
    alphacount = epsilon
    for i in range(0,nspectra):
        alpha,alphacount = oneSigmaF(z[i],f[i],alpha,alphacount)

    alpha = alpha/alphacount
    print "mean alpha value: %f" % (alpha)
    input("Press return to end program...")

def oneAlpha(filename,alpha,alphacount):

    
    data = np.genfromtxt(filename)
    flux = data[:,1]
    
    fileBase, fileExt = os.path.splitext(filename)
    outputFileA ="%s_LyaMatrix%s" % (fileBase, fileExt)
    snrFile = "%s_snrEstimate%s" % (fileBase, fileExt)
    
    snrRed = np.genfromtxt(snrFile)
    matrixData = np.genfromtxt(outputFileA)
    snrBlue = np.mean(matrixData[2,:])
    
    if (np.abs(snrRed-snrBlue)>.001):
        alphai = (snrRed/snrBlue)**2
        alpha = alpha + alphai
        alphacount = alphacount + 1
        print "alpha value for %s: %f" % (filename,alphai)
        
    else:
        print "skipping spectra"

    return alpha,alphacount

def oneSigmaF(z,filename,alpha,alphacount):

    lambdaA0 = 1216*(1+z)
    c = 3e5
    
    data = np.genfromtxt(filename)
    # flux = data[:,1]

    fileBase, fileExt = os.path.splitext(filename)
    outputFileA ="%s_LyaMatrix%s" % (fileBase, fileExt)
    snrFile = "%s_snrEstimate%s" % (fileBase, fileExt)
    snrRed = np.genfromtxt(snrFile)
    matrixData = np.genfromtxt(outputFileA)
    snrBlue = np.mean(matrixData[2,:])
    flux = matrixData[1,:]
    zs = matrixData[0,:]
    print zs[1:10]
    lambdas = 1216*(1+zs)
    vs = c*(lambdas-lambdaA0)/lambdaA0
    dv = np.abs(vs[1]-vs[0])

    if (np.abs(snrRed-snrBlue)>.001):
        alphai = (snrRed/snrBlue)**2
        alpha = alpha + alphai
        alphacount = alphacount + 1
        print "alpha value for %s: %f" % (filename,alphai)
        sigmaF = np.sqrt(np.var(flux)-1/np.mean(snrBlue**2))
        plt.plot(dv,sigmaF,'x')
        plt.xlabel('$\Delta$ v')
        plt.ylabel('$\sigma_{F}$')
        plt.title('$\sigma_{F}$ vs. Bin Size')
        plt.show(block=False)
    else:
        print "skipping spectra"

    return alpha,alphacount

def oneSNR(z,filename):

    
    blueLambda = 1275*(1+z)
    redLambda = 1375*(1+z)

    #filename = 'z599_hres.spec.tex'
    data = np.genfromtxt(filename)
    #wavelengths = data[:,0]
    flux = data[:,1]
    
    fileBase, fileExt = os.path.splitext(filename)
    knownFormatFile ="%s_method%s" % (fileBase, fileExt)
    outputFileA ="%s_LyaMatrix%s" % (fileBase, fileExt)
    snrFile = "%s_snrEstimate%s" % (fileBase, fileExt)
    snrEstimate = np.genfromtxt(snrFile)
    matrixData = np.genfromtxt(outputFileA)
    snrKnown = matrixData[2,-1]
    knownFormat = os.path.isfile(knownFormatFile)
    if knownFormat:
        Lmethod = np.genfromtxt(knownFormatFile)    
    else:
        print "yeah, um. this shouldn't happen..."

    #convert wavelengths to observed angstroms
    if (Lmethod == 1):
        wavelengths = pow(10,data[:,0])
    elif (Lmethod == 2):
        wavelengths = data[:,0]
    elif (Lmethod == 3):
        wavelengths = (1+z)*data[:,0]


    tdata = np.genfromtxt('LBQS.lis')
    tLambdas = tdata[:,0]
    tFlux = tdata[:,1]
    tLambdas = tLambdas*(1+z)
    scaleTemp = np.mean(flux[(wavelengths>blueLambda)&(wavelengths<redLambda)])/np.mean(tFlux[(tLambdas<redLambda)&(tLambdas>blueLambda)])
    tFlux = scaleTemp*tFlux

    maxL = 10800
    maxL = 10250
    minL = 9000
    pspan = 400
    w = wavelengths
    alli = np.nonzero(((w>minL)&(w<maxL)))
    
    allvars = np.zeros(np.shape(alli[0]))
    allwaves = w[alli]
    print np.shape(allvars),np.shape(alli)
    dL = 60
    dlambda = np.abs(w[alli[0][2]]-w[alli[0][1]])
    pspan = np.floor(dL/dlambda)
    print "variance calculated over %d pixels" % (pspan)
    for i in range(0,np.size(alli)):
        
        ii = alli[0][i]
               
        
        
        
        if (np.size(flux) > (ii+pspan+1)):
            minL = w[ii-pspan]
            maxL = w[ii+pspan]
            crapN = np.sqrt(np.var(flux[ii-pspan:ii+pspan]))
            crapD = np.mean(tFlux[(tLambdas>minL)&(tLambdas<maxL)])
            allvars[i] = crapD/crapN
        

    plt.figure()
    plt.plot(allwaves[allvars!=0],allvars[allvars!=0],'x')
    plt.plot(np.array((8317,8317)),np.array((0,np.max(allvars))))
    #plt.show(block=False)
    
    
    lambdaCheck = 8317
    varCheck = 0

    ndeg = 1
    p = np.polyfit(allwaves[allvars!=0],allvars[allvars!=0],ndeg)
    x = np.linspace(8000,10600,5000)
    varfit = np.zeros(np.shape(x))
    for q in range(0,ndeg+1):
        varfit = varfit + p[q]*x**(ndeg-q)
        varCheck = varCheck + p[q]*lambdaCheck**(ndeg-q)
    plt.plot(x,varfit)
    #plt.show(block=False)

    xdata = allwaves[allvars!=0]
    ydata = allvars[allvars!=0]
    xdata = x
    ydata = x**2
    fitfunc = lambda p, x: p[0] + p[1] * x ** (p[2])
    errfunc = lambda p, x, y: (y - fitfunc(p, x))
    out,success = optimize.leastsq(errfunc, [1,-1,-0.5],args=(xdata, ydata),maxfev=3000)
    pcheck = out[0] + out[1]*lambdaCheck**(out[2])
    varpfit = out[0] + out[1]*x**(out[2])
    plt.plot(x,varpfit)

    print out,success

    print "Extrapolated SNR at Lya Forest: %f" % (varCheck)
    print "Power-Law Extrapolation: %f" % (pcheck)
    print "SNR from red side: %f" % (snrEstimate)
    print "Provided SNR: %f" % (snrKnown)
    minL = 8000
    maxL = 10500
    #plt.figure()
    #plt.plot(tLambdas[(tLambdas>minL)&(tLambdas<maxL)],tFlux[(tLambdas>minL)&(tLambdas<maxL)])


    #plt.plot(wavelengths[(w<maxL)&(w>minL)],flux[(w>minL)&(w<maxL)])
    #plt.axis([8500,11000,0,1e-16])
    #plt.show(block=False)

    #input("Press return to end program")
    plt.close()

    snrFileE = "%s_snrEstimate_RedSideExtrapolation%s" % (fileBase, fileExt)
    outfile = open(snrFileE,'w')
    outfile.write("%f"%(varCheck))
    outfile.close()


    return varCheck,snrEstimate,snrKnown


def plotSpectra(sFilename,nFilename,z):
    print sFilename
    lambdaA0 = 1216
    lambdaB0 = 1026
    lambdaG0 = 972
    lambdaA = lambdaA0*(1+z)
    lambdaB = lambdaB0*(1+z)
    lambdaG = lambdaG0*(1+z)
        
    c = 3e5

    data = np.genfromtxt(sFilename)

    #check if we already know how to handle this file
    fileBase, fileExt = os.path.splitext(sFilename)
    knownFormatFile ="%s_method%s" % (fileBase, fileExt)
    knownFormat = os.path.isfile(knownFormatFile)
    if knownFormat:
        Lmethod = np.genfromtxt(knownFormatFile)    
    else:
        #prompt user for format, save information
        print "Beginning of data..."
        print data[0:10,:]
        print "End of data..."
        print data[-10:,:]
        print "Method 1: wavelength = 10^data"
        print "Method 2: wavelength = data"
        print "Method 3: wavelength = (1+z)*data"
        Lmethod = input('Method Number?:')

        outfile = open(knownFormatFile,'w')
        outfile.write("%d"%(Lmethod))
        outfile.close()

    #convert wavelengths to observed angstroms
    if (Lmethod == 1):
        lambdas = pow(10,data[:,0])
    elif (Lmethod == 2):
        lambdas = data[:,0]
    elif (Lmethod == 3):
        lambdas = (1+z)*data[:,0]

    flux = data[:,1]
    
    dlambdas = lambdas - lambdaA
    vs = c*dlambdas/lambdaA
    #relative velocities of Lyman series lines
    vA = (lambdaA - lambdaA)*c/lambdaA;
    vB = (lambdaB - lambdaA)*c/lambdaA;
    vG = (lambdaG - lambdaA)*c/lambdaA;
    #associated indices, do we need all of this?
    ia = len(vs[vs<vA])
    ib = len(vs[vs<vB])
    ig = len(vs[vs<vG])
    

    fluxA = flux[ib:ia]
    fluxB = flux[ig:ib]
    vsA = vs[ib:ia]
    vsB = vs[ig:ib]
    lambdasA = lambdas[ib:ia]
    lambdasB = lambdas[ig:ib]
    #is this the best thing to do?
    zsA = lambdasA/lambdaA0 - 1
    zsB = lambdasB/lambdaB0 - 1
    allzA = lambdas/lambdaA0 - 1
    allzB = lambdas/lambdaB0 - 1
    

    plt.plot(lambdas,flux)
    plt.plot([lambdaB, lambdaB],[min(flux), max(flux)])
    plt.plot(lambdasA,fluxA)
    plt.plot(lambdasB,fluxB)
    plt.xlabel('$\lambda$ ($\AA$)')
    plt.ylabel('Flux (Arbitrary Units)')
    plt.axis([lambdaG, lambdaA, min(fluxA), max(fluxA)])
    plt.show(block=False)

    plt.figure()
    plt.plot(zsA,fluxA)
    scaleBeta = np.mean([max(fluxA),min(fluxA)])
    scaleBetaMultiply = (max(fluxA)-min(fluxA))/(2*(max(fluxB)-min(fluxB)))
    plt.plot(zsB,scaleBetaMultiply*fluxB+scaleBeta)
    plt.legend(['Ly$\\alpha$','Ly$\\beta$'])
    plt.show(block=False)


    plt.close("all")


    ###alright, so we need to continuum fit this. 
    #Load the template
    tdata = np.genfromtxt('LBQS.lis')
    tLambdas = tdata[:,0]
    tFlux = tdata[:,1]
    plt.figure()
    plt.plot(tLambdas,tFlux)
    plt.xlabel('$\lambda$ ($\AA$)')
    plt.ylabel('Flux (Arbitrary Units)')
    plt.show(block=False)

    #wait = input('Press return to continue...')
    replot = 0
    acceptable = 0
    while (acceptable==0):
        plotarray = [1275, 1375, 0]
        while replot:
            print "Minimum/Maximum wavelengths in your spectra"
            print "are %f and %f"%(min(lambdas)/(1+z),max(lambdas)/(1+z))
            plotarray = input('[Lmin Lmax continueBool]:')
            plt.axis([plotarray[0], plotarray[1], min(tFlux), max(tFlux)])
            plt.show(block=False)
            replot = plotarray[2]
            
            
        tmin = plotarray[0]
        tmax = plotarray[1]
        #scale template flux to match spectra flux outside of Ly
        tMean = np.mean(tFlux[(tLambdas>tmin)&(tLambdas<tmax)])
        smin = tmin*(1+z)
        smax = tmax*(1+z)
        sMean = np.mean(flux[(lambdas>smin)&(lambdas<smax)])
        sVar = np.var(flux[(lambdas>smin)&(lambdas<smax)])
        
        tAdjust = sMean/tMean
        tFlux = tFlux*tAdjust
        tLambdas = tLambdas*(1+z)
        
        snrEstimate = sMean*1.0/np.sqrt(sVar)

        #plot both together
        plt.figure()
        plt.plot(tLambdas,tFlux)
        plt.plot(lambdas,flux)

        maxy = max([max(fluxA),max(tFlux)])
        plt.plot([lambdaA,lambdaA],[min(fluxA),maxy])
        plt.plot([lambdaB,lambdaB],[min(fluxA),maxy])
        plt.axis([lambdaG, max(lambdas), min(fluxA), maxy])
        plt.xlabel('$\lambda$ ($\AA$)')
        plt.ylabel('Flux (Arbitrary Units)')
        plt.legend(['Template Fit','Spectra','Ly$\\alpha$','Ly$\\beta$'])
        plt.title(sFilename)
        plt.show(block=False)
        #acceptable = input("Is this fit acceptable?")
        acceptable = 1
        print "assuming fit is acceptable..."
        if (acceptable == 0):
            replot = 1
            
        #saveBool = input("Save Figure?")
        saveBool = 0
        if saveBool:
            F = p.gcf()
            saveFile ="%s.eps" % (fileBase)
            F.savefig(saveFile, bbox_inches='tight')


    ### Ok, so now we need to turn this into a transmission
    ### and then save in some common format.

    #We would also like to include the noise in all of this...
    if (nFilename != 0):
        ndata = np.genfromtxt(nFilename)
        nlambdas = ndata[0,:]
        nsigmas = ndata[1,:]
    else:
        nlambdas = lambdas
    #ok, so first we actually need to get the lambda range
    LAmin = 1050*(1+z)
    LAmax = 1190*(1+z)
    LBmin = 980*(1+z)
    LBmax = 1020*(1+z)

    f = sp.interp1d(tLambdas,tFlux)
    if (nFilename != 0):
        nf = sp.interp1d(nlambdas,nsigmas)
    else:
        nf = f
    
    LAs = lambdas[(lambdas>LAmin)&(lambdas<LAmax)]
    LBs = lambdas[(lambdas>LBmin)&(lambdas<LBmax)]
    FAs = flux[(lambdas>LAmin)&(lambdas<LAmax)]
    FBs = flux[(lambdas>LBmin)&(lambdas<LBmax)]
    Atran = FAs/f(LAs)
    Btran = FBs/f(LBs)
    print np.min(LAs),np.min(nlambdas)
    Asigs = f(LAs)/nf(LAs)
    Bsigs = f(LBs)/nf(LBs)
    zAs = allzA[(lambdas>LAmin)&(lambdas<LAmax)]
    zBs = allzB[(lambdas>LBmin)&(lambdas<LBmax)]
    
    plt.figure()
    plt.plot(zAs,Atran)
    plt.plot(zBs,Btran)
    
    snrFile = "%s_snrEstimate%s" % (fileBase, fileExt)
    outfile = open(snrFile,'w')
    outfile.write("%f"%(snrEstimate))
    outfile.close()
    
    print "Considering file %s" %(sFilename)
    ncol = np.shape(data)[1]

    outputFileA ="%s_LyaMatrix%s" % (fileBase, fileExt)
    outputFileB ="%s_LybMatrix%s" % (fileBase, fileExt)
    doneAlready = os.path.isfile(outputFileA)
    
    print np.shape(snrEstimate*np.ones(np.shape(Atran))),np.shape(Atran)
    if (nFilename == 0):
        Asigs = snrEstimate*np.ones(np.shape(Atran))
        Bsigs = snrEstimate*np.ones(np.shape(Btran))

    if (doneAlready != 1):
        
        print np.shape(zAs),np.shape(Atran),np.shape(Asigs)
        LyaMatrix = np.vstack((zAs,Atran,Asigs))
        LybMatrix = np.vstack((zBs,Btran,Bsigs))
        print np.shape(LyaMatrix),np.shape(LybMatrix)
        np.savetxt(outputFileA, LyaMatrix, delimiter="\t")
        np.savetxt(outputFileB, LybMatrix, delimiter="\t")
            
    return vs,flux




if __name__ == "__main__":
    # testSNR()
    # oneSNR(5.82,'z582_hres.spec.tex')
    # estimateSNRs()
    # meanAlpha()
    meanAlpha()
